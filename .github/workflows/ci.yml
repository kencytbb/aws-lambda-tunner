name: CI\n\non:\n  push:\n    branches: [ main, develop ]\n  pull_request:\n    branches: [ main ]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    strategy:\n      matrix:\n        python-version: ['3.8', '3.9', '3.10', '3.11']\n\n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Set up Python ${{ matrix.python-version }}\n      uses: actions/setup-python@v4\n      with:\n        python-version: ${{ matrix.python-version }}\n    \n    - name: Cache pip packages\n      uses: actions/cache@v3\n      with:\n        path: ~/.cache/pip\n        key: ${{ runner.os }}-pip-${{ hashFiles('requirements*.txt') }}\n        restore-keys: |\n          ${{ runner.os }}-pip-\n    \n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n        pip install -r requirements-dev.txt\n    \n    - name: Lint with flake8\n      run: |\n        flake8 aws_lambda_tuner tests --count --select=E9,F63,F7,F82 --show-source --statistics\n        flake8 aws_lambda_tuner tests --count --exit-zero --max-complexity=10 --max-line-length=100 --statistics\n    \n    - name: Check formatting with black\n      run: |\n        black --check aws_lambda_tuner tests\n    \n    - name: Sort imports with isort\n      run: |\n        isort --check-only aws_lambda_tuner tests\n    \n    - name: Type check with mypy\n      run: |\n        mypy aws_lambda_tuner || true\n    \n    - name: Test with pytest\n      run: |\n        pytest -v --cov=aws_lambda_tuner --cov-report=xml\n    \n    - name: Upload coverage to Codecov\n      uses: codecov/codecov-action@v3\n      with:\n        file: ./coverage.xml\n        flags: unittests\n        name: codecov-umbrella\n        fail_ci_if_error: false\n\n  build:\n    runs-on: ubuntu-latest\n    needs: test\n    \n    steps:\n    - uses: actions/checkout@v3\n    \n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.9'\n    \n    - name: Install build tools\n      run: |\n        python -m pip install --upgrade pip\n        pip install build\n    \n    - name: Build distribution\n      run: |\n        python -m build\n    \n    - name: Check distribution\n      run: |\n        pip install twine\n        twine check dist/*\n    \n    - name: Upload artifacts\n      uses: actions/upload-artifact@v3\n      with:\n        name: dist\n        path: dist/\n
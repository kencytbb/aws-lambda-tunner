"""\nBasic usage example for AWS Lambda Tuner.\n"""\n\nimport asyncio\nimport json\nfrom aws_lambda_tuner import TunerConfig, TunerOrchestrator\n\n\nasync def main():\n    """\n    Basic example of tuning a Lambda function.\n    """\n    \n    # Create configuration\n    config = TunerConfig(\n        function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-api-handler',\n        payload={\n            "httpMethod": "GET",\n            "path": "/users",\n            "headers": {\n                "Content-Type": "application/json"\n            }\n        },\n        memory_sizes=[256, 512, 1024, 1536],\n        iterations=10,\n        strategy='balanced',\n        concurrent_executions=5,\n        output_dir='./my-tuning-results'\n    )\n    \n    # Create orchestrator\n    orchestrator = TunerOrchestrator(config)\n    \n    print("Starting Lambda tuning...")\n    print(f"Function: {config.function_arn}")\n    print(f"Memory sizes to test: {config.memory_sizes}")\n    print(f"Iterations per size: {config.iterations}")\n    \n    try:\n        # Run tuning with automatic report generation\n        results = await orchestrator.run_with_reporting()\n        \n        # Display summary\n        print("\nTuning completed successfully!")\n        print(f"Results saved to: {config.output_dir}")\n        print("\nKey findings:")\n        \n        # Find optimal configuration\n        configurations = results['configurations']\n        optimal = min(configurations, \n                     key=lambda c: sum(e['duration'] for e in c['executions'] if not e.get('error')) / \n                                  max(1, len([e for e in c['executions'] if not e.get('error')])))\n        \n        print(f"- Optimal memory size: {optimal['memory_mb']}MB")\n        print(f"- Average duration: {optimal['successful_executions'] and sum(e['duration'] for e in optimal['executions'] if not e.get('error')) / optimal['successful_executions']:.2f}ms")\n        \n    except Exception as e:\n        print(f"Error during tuning: {e}")\n        raise\n\n\nif __name__ == '__main__':\n    # Run the async main function\n    asyncio.run(main())\n
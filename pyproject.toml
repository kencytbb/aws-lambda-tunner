[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "aws-lambda-tuner"
version = "2.0.0"
description = "A comprehensive tool for optimizing AWS Lambda functions for cost and performance with intelligent workload analysis"
readme = "README.md"
authors = [
    {name = "AWS Lambda Tuner Contributors", email = "support@lambdatuner.com"}
]
license = {text = "MIT"}
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Monitoring",
    "Topic :: Utilities"
]
requires-python = ">=3.8"
dependencies = [
    "boto3>=1.28.0",
    "click>=8.1.0",
    "tabulate>=0.9.0",
    "jinja2>=3.1.0",
    "pyyaml>=6.0",
    "colorama>=0.4.0",
    "rich>=13.5.0",
    "tqdm>=4.65.0",
    "numpy>=1.24.0",
    "pandas>=1.5.0",
    "matplotlib>=3.7.0",
    "seaborn>=0.12.0",
    "plotly>=5.0.0",
    "aiohttp>=3.8.0",
    "asyncio-throttle>=1.0.0",
    "scikit-learn>=1.3.0"
]

[project.urls]
Homepage = "https://github.com/kencytbb/aws-lambda-tuner"
Documentation = "https://github.com/kencytbb/aws-lambda-tuner/wiki"
Repository = "https://github.com/kencytbb/aws-lambda-tuner"
Issues = "https://github.com/kencytbb/aws-lambda-tuner/issues"

[project.scripts]
aws-lambda-tuner = "aws_lambda_tuner.cli:main"

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.3.0",
    "pytest-mock>=3.11.0",
    "pytest-benchmark>=4.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-html>=3.2.0",
    "pytest-random-order>=1.1.0",
    "black>=23.7.0",
    "flake8>=6.1.0",
    "mypy>=1.4.1",
    "isort>=5.12.0",
    "pre-commit>=3.3.3",
    "moto[lambda,cloudwatch,logs]>=4.2.0",
    "factory-boy>=3.3.0",
    "freezegun>=1.2.0"
]
docs = [
    "sphinx>=7.1.0",
    "sphinx-rtd-theme>=1.3.0"
]

[tool.setuptools.packages.find]
include = ["aws_lambda_tuner*"]
exclude = ["tests*", "docs*", "examples*"]

[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'

[tool.isort]
profile = "black"
line_length = 100

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "-v --tb=short --strict-markers --strict-config"
minversion = "7.4"
norecursedirs = [".git", ".tox", "dist", "build", "*.egg"]
markers = [
    "unit: Unit tests for individual components",
    "integration: Integration tests for component interactions",
    "e2e: End-to-end tests for complete workflows",
    "performance: Performance and load tests",
    "slow: Tests that take more than 30 seconds",
    "aws: Tests that interact with AWS services (mocked)",
    "workload_cpu: Tests for CPU-intensive workloads",
    "workload_io: Tests for I/O-bound workloads",
    "workload_memory: Tests for memory-intensive workloads",
    "strategy_cost: Tests for cost optimization strategy",
    "strategy_speed: Tests for speed optimization strategy",
    "strategy_balanced: Tests for balanced optimization strategy",
    "parametrize: Parametrized tests with multiple configurations"
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning"
]
# timeout = 300
junit_family = "xunit2"

[tool.coverage.run]
source = ["aws_lambda_tuner"]
branch = true
parallel = true
omit = [
    "*/tests/*",
    "*/examples/*",
    "*/__init__.py",
    "aws_lambda_tuner/cli.py",
    "aws_lambda_tuner/cli_module.py"
]
concurrency = ["thread", "multiprocessing"]

[tool.coverage.report]
show_missing = true
precision = 2
skip_covered = false
skip_empty = true
sort = "Cover"
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "def __str__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
fail_under = 90

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"
"""\nTests for configuration module.\n"""\n\nimport pytest\nimport json\nfrom pathlib import Path\n\nfrom aws_lambda_tuner.config_module import TunerConfig, ConfigManager\nfrom aws_lambda_tuner.exceptions import ConfigurationError, TemplateNotFoundError\n\n\nclass TestTunerConfig:\n    """Test TunerConfig class."""\n    \n    def test_valid_config_creation(self):\n        """Test creating valid configuration."""\n        config = TunerConfig(\n            function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n            payload='{"test": "data"}',\n            memory_sizes=[256, 512, 1024],\n            iterations=10,\n            strategy='balanced'\n        )\n        \n        assert config.function_arn == 'arn:aws:lambda:us-east-1:123456789012:function:my-function'\n        assert config.memory_sizes == [256, 512, 1024]\n        assert config.iterations == 10\n        assert config.strategy == 'balanced'\n        assert config.region == 'us-east-1'  # Extracted from ARN\n    \n    def test_invalid_arn(self):\n        """Test invalid ARN raises error."""\n        with pytest.raises(ConfigurationError, match="Invalid Lambda function ARN"):\n            TunerConfig(\n                function_arn='not-an-arn',\n                memory_sizes=[256]\n            )\n    \n    def test_invalid_memory_size_range(self):\n        """Test invalid memory size range."""\n        with pytest.raises(ConfigurationError, match="Invalid memory size: 64"):\n            TunerConfig(\n                function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n                memory_sizes=[64]  # Too small\n            )\n        \n        with pytest.raises(ConfigurationError, match="Invalid memory size: 10241"):\n            TunerConfig(\n                function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n                memory_sizes=[10241]  # Too large\n            )\n    \n    def test_invalid_memory_size_increment(self):\n        """Test invalid memory size increment."""\n        with pytest.raises(ConfigurationError, match="must be a multiple of 64 MB"):\n            TunerConfig(\n                function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n                memory_sizes=[300]  # Not multiple of 64\n            )\n    \n    def test_memory_size_128_allowed(self):\n        """Test 128MB is allowed despite not being multiple of 64."""\n        config = TunerConfig(\n            function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n            memory_sizes=[128]\n        )\n        assert 128 in config.memory_sizes\n    \n    def test_default_memory_sizes_by_strategy(self):\n        """Test default memory sizes are set based on strategy."""\n        # Speed strategy\n        config_speed = TunerConfig(\n            function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n            strategy='speed'\n        )\n        assert all(size >= 512 for size in config_speed.memory_sizes)\n        \n        # Cost strategy\n        config_cost = TunerConfig(\n            function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n            strategy='cost'\n        )\n        assert min(config_cost.memory_sizes) == 128\n    \n    def test_invalid_iterations(self):\n        """Test invalid iterations value."""\n        with pytest.raises(ConfigurationError, match="Iterations must be at least 1"):\n            TunerConfig(\n                function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n                iterations=0\n            )\n    \n    def test_invalid_strategy(self):\n        """Test invalid strategy."""\n        with pytest.raises(ConfigurationError, match="Invalid strategy"):\n            TunerConfig(\n                function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n                strategy='unknown'\n            )\n    \n    def test_invalid_concurrent_executions(self):\n        """Test invalid concurrent executions."""\n        with pytest.raises(ConfigurationError, match="Concurrent executions must be at least 1"):\n            TunerConfig(\n                function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n                concurrent_executions=0\n            )\n    \n    def test_to_dict(self):\n        """Test converting config to dictionary."""\n        config = TunerConfig(\n            function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n            memory_sizes=[256, 512]\n        )\n        \n        config_dict = config.to_dict()\n        assert isinstance(config_dict, dict)\n        assert config_dict['function_arn'] == config.function_arn\n        assert config_dict['memory_sizes'] == config.memory_sizes\n    \n    def test_from_dict(self):\n        """Test creating config from dictionary."""\n        config_dict = {\n            'function_arn': 'arn:aws:lambda:us-east-1:123456789012:function:my-function',\n            'memory_sizes': [256, 512],\n            'iterations': 5\n        }\n        \n        config = TunerConfig.from_dict(config_dict)\n        assert config.function_arn == config_dict['function_arn']\n        assert config.memory_sizes == config_dict['memory_sizes']\n        assert config.iterations == config_dict['iterations']\n    \n    def test_from_file(self, sample_config_file):\n        """Test loading config from file."""\n        config = TunerConfig.from_file(str(sample_config_file))\n        assert config.function_arn == 'arn:aws:lambda:us-east-1:123456789012:function:test-function'\n        assert config.memory_sizes == [256, 512]\n    \n    def test_save_config(self, temp_dir):\n        """Test saving config to file."""\n        config = TunerConfig(\n            function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n            memory_sizes=[256, 512]\n        )\n        \n        filepath = temp_dir / 'saved_config.json'\n        config.save(str(filepath))\n        \n        assert filepath.exists()\n        \n        # Load and verify\n        loaded_config = TunerConfig.from_file(str(filepath))\n        assert loaded_config.function_arn == config.function_arn\n        assert loaded_config.memory_sizes == config.memory_sizes\n\n\nclass TestConfigManager:\n    """Test ConfigManager class."""\n    \n    def test_load_template(self):\n        """Test loading configuration template."""\n        manager = ConfigManager()\n        \n        # Speed template\n        speed_template = manager.load_template('speed')\n        assert speed_template['strategy'] == 'speed'\n        assert isinstance(speed_template['memory_sizes'], list)\n    \n    def test_load_nonexistent_template(self):\n        """Test loading non-existent template."""\n        manager = ConfigManager()\n        \n        with pytest.raises(TemplateNotFoundError):\n            manager.load_template('nonexistent')\n    \n    def test_create_from_template(self):\n        """Test creating config from template."""\n        manager = ConfigManager()\n        \n        config = manager.create_from_template(\n            'cost',\n            function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function'\n        )\n        \n        assert config.strategy == 'cost'\n        assert config.function_arn == 'arn:aws:lambda:us-east-1:123456789012:function:my-function'\n    \n    def test_create_from_template_with_defaults(self):\n        """Test creating config from template uses defaults."""\n        manager = ConfigManager()\n        \n        # Should not raise error even without function ARN\n        config = manager.create_from_template('development')\n        assert config.function_arn  # Should have default ARN\n    \n    def test_merge_configs(self):\n        """Test merging configurations."""\n        manager = ConfigManager()\n        \n        base_config = TunerConfig(\n            function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n            memory_sizes=[256, 512],\n            iterations=10\n        )\n        \n        overrides = {\n            'iterations': 20,\n            'strategy': 'speed'\n        }\n        \n        merged = manager.merge_configs(base_config, overrides)\n        \n        assert merged.function_arn == base_config.function_arn\n        assert merged.memory_sizes == base_config.memory_sizes\n        assert merged.iterations == 20  # Overridden\n        assert merged.strategy == 'speed'  # Overridden\n    \n    def test_validate_config_warnings(self):\n        """Test configuration validation warnings."""\n        manager = ConfigManager()\n        \n        # Speed strategy with small memory\n        config1 = TunerConfig(\n            function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n            memory_sizes=[128, 256],\n            strategy='speed'\n        )\n        warnings1 = manager.validate_config(config1)\n        assert any('small memory sizes' in w for w in warnings1)\n        \n        # Cost strategy with large memory\n        config2 = TunerConfig(\n            function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n            memory_sizes=[3008],\n            strategy='cost'\n        )\n        warnings2 = manager.validate_config(config2)\n        assert any('large memory sizes' in w for w in warnings2)\n        \n        # Low iteration count\n        config3 = TunerConfig(\n            function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n            iterations=3\n        )\n        warnings3 = manager.validate_config(config3)\n        assert any('Low iteration count' in w for w in warnings3)\n        \n        # High concurrent executions\n        config4 = TunerConfig(\n            function_arn='arn:aws:lambda:us-east-1:123456789012:function:my-function',\n            concurrent_executions=25\n        )\n        warnings4 = manager.validate_config(config4)\n        assert any('High concurrent executions' in w for w in warnings4)\n    \n    def test_template_caching(self):\n        """Test template caching behavior."""\n        manager = ConfigManager()\n        \n        # Load template twice\n        template1 = manager.load_template('speed')\n        template2 = manager.load_template('speed')\n        \n        # Should be different objects (copies)\n        assert template1 is not template2\n        assert template1 == template2\n